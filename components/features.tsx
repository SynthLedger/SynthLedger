"use client"

import { useRef, useState, useEffect } from "react"
import { motion, useInView, AnimatePresence } from "framer-motion"
import { Shield, Zap, Code, Workflow, Layers, BarChart } from "lucide-react"
import Image from "next/image"

const features = [
  {
    icon: <Code className="h-6 w-6" />,
    title: "AI-Driven Contract Generation",
    description:
      "Transform natural language requirements into secure, optimized smart contracts with our advanced AI system.",
    image: "/images/ai-contract-generation.png",
    color: "from-blue-600 to-cyan-500",
    accent: "#3b82f6",
    codeSnippet: `// Generated by SynthLedger AI
  contract TokenSwap {
  function swap(
    address token,
    uint256 amount
  ) external returns (bool) {
    // Secure implementation
    return true;
  }
  }`,
  },
  {
    icon: <Shield className="h-6 w-6" />,
    title: "Automated Security Auditing",
    description: "Identify and fix vulnerabilities automatically with our comprehensive security analysis engine.",
    image: "/images/security-auditing.png",
    color: "from-cyan-500 to-teal-400",
    accent: "#06b6d4",
    codeSnippet: `// Security audit report
  audit.analyze(contract);
  audit.findVulnerabilities();
  audit.generateFixes();
  // 0 critical issues found
  // 0 high severity issues found`,
  },
  {
    icon: <Layers className="h-6 w-6" />,
    title: "Cross-Chain Deployment",
    description:
      "Deploy your contracts seamlessly across multiple blockchain networks with automatic compatibility adaptations.",
    image: "/images/cross-chain-deployment.png",
    color: "from-indigo-600 to-blue-500",
    accent: "#4f46e5",
    codeSnippet: `// Multi-chain deployment
  deploy.to("ethereum");
  deploy.to("polygon");
  deploy.to("avalanche");
  deploy.to("binance");
  // Deployed to 4 chains`,
  },
  {
    icon: <Zap className="h-6 w-6" />,
    title: "Gas Optimization",
    description:
      "Reduce transaction costs with our intelligent gas optimization algorithms that maintain full functionality.",
    image: "/images/gas-optimization.png",
    color: "from-blue-500 to-purple-500",
    accent: "#3b82f6",
    codeSnippet: `// Before optimization
  // Gas used: 245,000
  // After optimization
  // Gas used: 98,000
  // 60% gas reduction`,
  },
  {
    icon: <Workflow className="h-6 w-6" />,
    title: "Visual Contract Designer",
    description:
      "Design complex contract logic visually with our intuitive drag-and-drop interface for non-technical users.",
    image: "/images/visual-designer.png",
    color: "from-teal-500 to-emerald-400",
    accent: "#14b8a6",
    codeSnippet: `// Generated from visual design
  contract NFTMarketplace {
  // Components: Auction, Listing, Bidding
  // Visually connected and compiled
  }`,
  },
  {
    icon: <BarChart className="h-6 w-6" />,
    title: "Performance Analytics",
    description:
      "Monitor your contracts' performance with real-time analytics and insights to optimize your blockchain applications.",
    image: "/images/performance-analytics.png",
    color: "from-purple-600 to-pink-500",
    accent: "#9333ea",
    codeSnippet: `// Analytics dashboard
  metrics.track("gas");
  metrics.track("calls");
  metrics.track("users");
  // 24/7 monitoring enabled`,
  },
]

export default function Features() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, amount: 0.1 })
  const [activeFeature, setActiveFeature] = useState(0)
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })

  // Auto-rotate features
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveFeature((prev) => (prev + 1) % features.length)
    }, 5000)

    return () => clearInterval(interval)
  }, [])

  // Track mouse position for parallax effects
  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({
        x: e.clientX / window.innerWidth - 0.5,
        y: e.clientY / window.innerHeight - 0.5,
      })
    }

    window.addEventListener("mousemove", handleMouseMove)
    return () => window.removeEventListener("mousemove", handleMouseMove)
  }, [])

  return (
    <section id="features" className="py-32 relative overflow-hidden">
      {/* Futuristic background */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-950 via-blue-950/10 to-gray-950 z-0"></div>

      {/* Animated grid background */}
      <div className="absolute inset-0 z-0 overflow-hidden">
        <svg className="absolute w-full h-full opacity-10" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <pattern id="grid" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">
              <path d="M100 0 L0 0 0 100" fill="none" stroke="rgba(59, 130, 246, 0.5)" strokeWidth="0.5" />
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#grid)" />
        </svg>

        {/* Animated particles */}
        {Array.from({ length: 30 }).map((_, i) => (
          <motion.div
            key={i}
            className="absolute bg-blue-500 rounded-full"
            style={{
              width: Math.random() * 4 + 1,
              height: Math.random() * 4 + 1,
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -30, 0],
              opacity: [0, 0.7, 0],
            }}
            transition={{
              duration: Math.random() * 5 + 5,
              repeat: Number.POSITIVE_INFINITY,
              delay: Math.random() * 5,
            }}
          />
        ))}

        {/* Glowing orbs */}
        <motion.div
          className="absolute rounded-full"
          style={{
            width: "600px",
            height: "600px",
            top: "30%",
            left: "60%",
            background: "radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, rgba(59, 130, 246, 0) 70%)",
            transform: `translate(${mousePosition.x * -50}px, ${mousePosition.y * -50}px)`,
          }}
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.3, 0.5, 0.3],
          }}
          transition={{
            duration: 8,
            repeat: Number.POSITIVE_INFINITY,
          }}
        />
      </div>

      <div className="container mx-auto px-4 relative z-10" ref={ref}>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
          className="text-center mb-20"
        >
          <div className="inline-block px-3 py-1 rounded-full bg-blue-900/30 text-blue-400 text-sm font-medium border border-blue-700/30 mb-4">
            Powerful Features
          </div>
          <h2 className="text-4xl md:text-6xl font-bold mb-6 text-white">
            Everything You Need for{" "}
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-cyan-400">
              Smart Contract Development
            </span>
          </h2>
          <p className="text-gray-400 max-w-2xl mx-auto text-lg">
            Our comprehensive platform provides all the tools you need to design, develop, audit, and deploy secure
            smart contracts efficiently.
          </p>
        </motion.div>

        {/* Futuristic 3D Feature Showcase */}
        <div className="relative max-w-7xl mx-auto h-[700px] md:h-[800px]">
          {/* Central holographic display */}
          <div className="absolute inset-0 flex items-center justify-center">
            <motion.div
              className="relative w-full max-w-4xl h-[600px] perspective"
              style={{
                transform: `rotateX(${mousePosition.y * 5}deg) rotateY(${mousePosition.x * 5}deg)`,
              }}
            >
              {/* Holographic frame */}
              <motion.div
                className="absolute inset-0 border-2 border-blue-500/30 rounded-3xl z-10"
                initial={{ opacity: 0 }}
                animate={isInView ? { opacity: 1 } : { opacity: 0 }}
                transition={{ duration: 1 }}
              >
                {/* Corner accents */}
                <div className="absolute top-0 left-0 w-10 h-10 border-t-2 border-l-2 border-blue-500/50 rounded-tl-3xl"></div>
                <div className="absolute top-0 right-0 w-10 h-10 border-t-2 border-r-2 border-blue-500/50 rounded-tr-3xl"></div>
                <div className="absolute bottom-0 left-0 w-10 h-10 border-b-2 border-l-2 border-blue-500/50 rounded-bl-3xl"></div>
                <div className="absolute bottom-0 right-0 w-10 h-10 border-b-2 border-r-2 border-blue-500/50 rounded-br-3xl"></div>

                {/* Scan lines */}
                <div className="absolute inset-0 overflow-hidden opacity-10">
                  {Array.from({ length: 40 }).map((_, i) => (
                    <div key={i} className="w-full h-px bg-blue-400" style={{ marginTop: `${i * 15}px` }}></div>
                  ))}
                </div>
              </motion.div>

              {/* Feature display area */}
              <div className="absolute inset-0 flex items-center justify-center">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={activeFeature}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.9 }}
                    transition={{ duration: 0.5 }}
                    className="w-full h-full flex flex-col md:flex-row items-center"
                  >
                    {/* Feature visualization */}
                    <div className="w-full md:w-1/2 h-full relative flex items-center justify-center p-6">
                      <motion.div
                        className="relative w-full max-w-md aspect-video rounded-xl overflow-hidden border border-blue-500/30 shadow-lg shadow-blue-500/20"
                        initial={{ x: -50, opacity: 0 }}
                        animate={{ x: 0, opacity: 1 }}
                        transition={{ duration: 0.5, delay: 0.2 }}
                      >
                        {/* Feature image */}
                        <Image
                          src={features[activeFeature].image || "/placeholder.svg"}
                          alt={features[activeFeature].title}
                          width={600}
                          height={400}
                          className="w-full h-full object-cover"
                        />

                        {/* Overlay gradient */}
                        <div className="absolute inset-0 bg-gradient-to-tr from-gray-950/80 via-transparent to-transparent"></div>

                        {/* Animated scan line */}
                        <motion.div
                          className={`absolute top-0 left-0 w-full h-2 bg-gradient-to-r ${features[activeFeature].color} opacity-70`}
                          animate={{
                            top: ["0%", "100%", "0%"],
                          }}
                          transition={{
                            duration: 4,
                            repeat: Number.POSITIVE_INFINITY,
                            repeatDelay: 1,
                          }}
                        />

                        {/* Feature icon */}
                        <div className="absolute bottom-4 left-4 w-12 h-12 rounded-lg bg-gradient-to-br from-blue-600 to-cyan-500 flex items-center justify-center text-white">
                          {features[activeFeature].icon}
                        </div>
                      </motion.div>

                      {/* Floating code snippet */}
                      <motion.div
                        className="absolute top-1/2 right-0 transform translate-x-1/4 -translate-y-1/2 bg-gray-950/90 backdrop-blur-sm border border-blue-500/30 rounded-xl p-4 shadow-xl w-64 md:w-72 font-mono text-xs text-blue-300 hidden md:block"
                        initial={{ opacity: 0, x: "30%" }}
                        animate={{
                          opacity: 1,
                          x: "25%",
                          y: ["-50%", "-55%", "-50%"],
                          rotateZ: [0, -3, 0],
                        }}
                        transition={{
                          opacity: { duration: 0.7, delay: 0.4 },
                          x: { duration: 0.7, delay: 0.4 },
                          y: { duration: 5, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" },
                          rotateZ: { duration: 6, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" },
                        }}
                      >
                        <div className="flex items-center mb-2">
                          <div className="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                          <div className="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                          <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                          <div className="text-xs text-gray-400 ml-2">code.sol</div>
                        </div>
                        <pre className="whitespace-pre-wrap">{features[activeFeature].codeSnippet}</pre>
                      </motion.div>
                    </div>

                    {/* Feature details */}
                    <div className="w-full md:w-1/2 h-full flex items-center p-6">
                      <motion.div
                        className="w-full"
                        initial={{ x: 50, opacity: 0 }}
                        animate={{ x: 0, opacity: 1 }}
                        transition={{ duration: 0.5, delay: 0.3 }}
                      >
                        <div
                          className={`w-16 h-16 rounded-xl bg-gradient-to-r ${features[activeFeature].color} flex items-center justify-center mb-6 relative`}
                        >
                          <div className="text-white w-8 h-8">{features[activeFeature].icon}</div>
                          <motion.div
                            className="absolute inset-0 rounded-xl"
                            animate={{
                              boxShadow: [
                                `0 0 0 ${features[activeFeature].accent}00`,
                                `0 0 20px ${features[activeFeature].accent}80`,
                                `0 0 0 ${features[activeFeature].accent}00`,
                              ],
                            }}
                            transition={{
                              duration: 3,
                              repeat: Number.POSITIVE_INFINITY,
                            }}
                          />
                        </div>

                        <h3 className="text-3xl font-bold mb-4 text-white">{features[activeFeature].title}</h3>

                        <p className="text-gray-300 text-lg mb-8">{features[activeFeature].description}</p>

                        {/* Feature metrics */}
                        <div className="space-y-4 mb-8">
                          {[
                            { label: "Efficiency", value: 98 },
                            { label: "Security", value: 95 },
                            { label: "Usability", value: 92 },
                          ].map((metric, i) => (
                            <div key={i}>
                              <div className="flex justify-between text-sm mb-1">
                                <span className="text-gray-400">{metric.label}</span>
                                <span className="text-cyan-400">{metric.value}%</span>
                              </div>
                              <div className="w-full h-1.5 bg-gray-800 rounded-full overflow-hidden">
                                <motion.div
                                  className={`h-full bg-gradient-to-r ${features[activeFeature].color}`}
                                  initial={{ width: 0 }}
                                  animate={{ width: `${metric.value}%` }}
                                  transition={{ duration: 1, delay: 0.5 + i * 0.1 }}
                                />
                              </div>
                            </div>
                          ))}
                        </div>

                        <motion.button
                          className={`px-6 py-3 rounded-xl bg-gradient-to-r ${features[activeFeature].color} text-white font-medium shadow-lg shadow-blue-500/20 hover:shadow-blue-500/40 transition-all duration-300`}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          Learn More
                        </motion.button>
                      </motion.div>
                    </div>
                  </motion.div>
                </AnimatePresence>
              </div>

              {/* Feature navigation dots */}
              <div className="absolute -bottom-16 left-1/2 transform -translate-x-1/2 flex space-x-3">
                {features.map((_, index) => (
                  <motion.button
                    key={index}
                    className={`w-3 h-3 rounded-full ${
                      activeFeature === index ? "bg-gradient-to-r from-blue-500 to-cyan-500" : "bg-gray-700"
                    }`}
                    onClick={() => setActiveFeature(index)}
                    whileHover={{ scale: 1.5 }}
                    whileTap={{ scale: 0.9 }}
                  />
                ))}
              </div>
            </motion.div>
          </div>
        </div>

        {/* Feature selection interface */}
        <div className="mt-32 max-w-6xl mx-auto">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {features.map((feature, index) => (
              <motion.div
                key={index}
                className={`cursor-pointer perspective ${activeFeature === index ? "z-10" : "z-0"}`}
                onClick={() => setActiveFeature(index)}
                initial={{ opacity: 0, y: 30 }}
                animate={isInView ? { opacity: 1, y: 0 } : {}}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                whileHover={{ scale: 1.05 }}
              >
                <motion.div
                  className={`h-24 rounded-xl flex flex-col items-center justify-center p-4 transition-all duration-300 ${
                    activeFeature === index
                      ? `bg-gradient-to-br ${feature.color} border-none`
                      : "bg-gray-900/50 border border-gray-800 hover:border-blue-500/30"
                  }`}
                  animate={
                    activeFeature === index
                      ? {
                          y: -10,
                          boxShadow: `0 10px 30px ${feature.accent}40`,
                        }
                      : {}
                  }
                >
                  <div
                    className={`w-10 h-10 rounded-lg flex items-center justify-center mb-2 ${
                      activeFeature === index ? "bg-white/20 text-white" : "bg-gray-800/50 text-gray-400"
                    }`}
                  >
                    {feature.icon}
                  </div>
                  <div
                    className={`text-xs text-center font-medium ${
                      activeFeature === index ? "text-white" : "text-gray-400"
                    }`}
                  >
                    {feature.title.split(" ")[0]}
                  </div>
                </motion.div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}

